// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.Text
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  accounts      Account[]
  sessions      Session[]
<<<<<<< HEAD
  tasks         Task[]
=======
  savedTracks   SpotifySavedTrack[]
>>>>>>> f0ec4b8df50f17a6c2f5e83ce99d53f0b232f814
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

<<<<<<< HEAD
model Task {
  id         String   @id @default(cuid()) 
  parentId   String?
  name       String
  userId     String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

=======

model SpotifySavedTrack {
  trackId String @unique
  userId  String
  added   DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  track SpotifyTrack @relation(fields: [trackId], references: [id])
 
  @@unique([userId, trackId])
  @@index([userId])
}

model SpotifyArtistTrack {
  artistId String @unique
  trackId String

  artist SpotifyArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  track SpotifyTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([artistId, trackId])
  @@index([artistId])
  @@index([trackId])
}

model SpotifyArtist {
  id String @unique
  name String
  imgUrl String?
  
  tracks SpotifyArtistTrack[]
}

model SpotifyTrack {
  id String @unique
  albumId String

  saved SpotifySavedTrack[]
  artists SpotifyArtistTrack[]
}
>>>>>>> f0ec4b8df50f17a6c2f5e83ce99d53f0b232f814
